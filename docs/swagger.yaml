definitions:
  dbexample.UserCreate:
    properties:
      age:
        type: integer
      name:
        type: string
    required:
    - age
    - name
    type: object
  dbexample.UserGet:
    properties:
      age:
        type: integer
      id:
        type: string
      name:
        type: string
    required:
    - age
    - id
    - name
    type: object
info:
  contact: {}
  description: This is an example for all api server projects in App Elevate
  title: APPE COREE example server
  version: "1.0"
paths:
  /db/user:
    post:
      consumes:
      - application/json
      description: create a user using post
      parameters:
      - description: User object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dbexample.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dbexample.UserGet'
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a user
      tags:
      - DB Example API
  /db/user/{name}:
    get:
      consumes:
      - application/json
      description: Get a User by name
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/dbexample.UserGet'
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get a User by name
      tags:
      - DB Example API
  /health:
    get:
      consumes:
      - application/json
      description: Check for the health of the server
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Health check for the server
      tags:
      - Health Check
  /protected/profile:
    get:
      consumes:
      - application/json
      description: Get the user profile information after authenticating with Firebase.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get Profile
      tags:
      - Protected
  /protected/secret:
    get:
      consumes:
      - text/plain
      description: Return secret
      responses:
        "200":
          description: secret
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get A Secret if Authenticated
      tags:
      - Protected
  /sentry/crash:
    get:
      consumes:
      - application/json
      description: Crash the server
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Crashes the server and sends a report to Sentry
      tags:
      - Sentry Test API
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: API for testing that the database is setup correctly
  name: DB Example API
- description: Api for testing Sentry is setup correctly
  name: Sentry Test API
- description: Health Check for this API
  name: Health Check
- description: Endpoints that require authentication
  name: Protected

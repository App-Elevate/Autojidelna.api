name: Deploy

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main
    paths:
      - "**.*.go"
      - "docs/**"
      - "Dockerfile"
      - "docker-compose.yml"
      - ".github/workflows/deploy.yml"
      - ".dockerignore"
      - "components/**"
      - "ent/**"
      - "go.mod"
      - "go.sum"

jobs:
  build:
    runs-on: blacksmith-4vcpu-ubuntu-2204
    environment:
      name: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: registry.qrn.cz
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build Docker image
        run: docker build --platform linux/amd64 -t registry.qrn.cz/coree:latest .

      - name: Push Docker image
        run: docker push registry.qrn.cz/coree:latest

  deploy:
    runs-on: blacksmith-4vcpu-ubuntu-2204
    environment:
      name: ssh
      url: https://api.qrn.cz/
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 1: Install cloudflared
      - name: Install Cloudflared
        run: |
          curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb && 
          sudo dpkg -i cloudflared.deb

      # Step 2: Set up SSH keys if using key-based auth
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Step 3: Create SSH config with Cloudflare Access Service Token
      - name: Set up SSH config for Cloudflare Access
        run: |
          echo "Host coree" >> ~/.ssh/config
          echo "  HostName ${{ vars.SSH_HOST }}" >> ~/.ssh/config
          echo "  ProxyCommand cloudflared access ssh --hostname %h --service-token-id=${{ secrets.CLOUDFLARE_CLIENT_ID }} --service-token-secret=${{ secrets.CLOUDFLARE_CLIENT_SECRET }}" >> ~/.ssh/config
          echo "  User root" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
        # Step 4: Add the SSH host to known hosts manually
      - name: Add SSH host to known hosts
        run: |
          echo "${{ vars.SSH_HOST }} ${{ secrets.SSH_HOST_KEY }}" >> ~/.ssh/known_hosts

      # Step 4: SSH into the server and execute commands
      - name: SSH into server and deploy
        run: |
          ssh coree
